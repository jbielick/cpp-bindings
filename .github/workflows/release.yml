name: release
on:
  push:
    tags:
      - 'v*'

jobs:
  build-lib:
    name: build lib file (target = ${{ matrix.build.target }})
    runs-on: ${{ matrix.build.os }}
    env:
      BUILD_ENV: release
      TARGET: ${{ matrix.build.target }}
      CXX: ${{ matrix.build.cxx }}
      AR: ${{ matrix.build.ar }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cxx: clang++-12
            ar: llvm-ar-12
            lib_file: libruby_parser_cpp.a
            output_artifact_name: libruby_parser_cpp-x86_64-unknown-linux-gnu.a

          - os: macos-latest
            target: x86_64-apple-darwin
            cxx: clang++
            ar: ar
            lib_file: libruby_parser_cpp.a
            output_artifact_name: libruby_parser_cpp-x86_64-apple-darwin.a

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cxx: cl.exe
            lib_file: libruby_parser_cpp.lib
            output_artifact_name: libruby_parser_cpp-x86_64-pc-windows-msvc.lib

    steps:
      - name: setup msvc on windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.build.target }}
          override: true

      - name: print rustc detailed version
        run: rustc --version --verbose

      - name: checkout
        uses: actions/checkout@v2

      - name: codegen
        env:
          RUSTFLAGS: ""
        run: |
          make do-codegen
          make token_ids.hpp

      - name: make lib file
        run: |
          make ${{ matrix.build.lib_file }}
          cp ${{ matrix.build.lib_file }} ${{ matrix.build.output_artifact_name }}

      - name: upload ${{ matrix.build.output_artifact_name }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.build.output_artifact_name }}
          path: ${{ matrix.build.output_artifact_name }}

      - name: download benchmark assets
        run: make benchmark/download

      - name: build C++ runner
        run: make benchmark/cpp-parser

      # NOTE: ruby/setup-ruby breaks paths for MSVC,
      #       and so all files must be compiled before running Ruby
      - name: install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1.1"

      - name: benchmark
        run: make benchmark/record

      - name: upload ${{ matrix.build.target }}.benchmark-out
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.build.target }}.benchmark-out
          path: ${{ matrix.build.target }}.benchmark-out

  build-header:
    name: build header file
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-gnu
    steps:
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: checkout
        uses: actions/checkout@v2

      - name: build lib-ruby-parser.hpp
        run: make lib-ruby-parser.hpp

      - name: upload lib-ruby-parser.hpp
        uses: actions/upload-artifact@v2
        with:
          name: lib-ruby-parser.hpp
          path: lib-ruby-parser.hpp

  build-release-notes:
    name: build release notes
    needs:
      - 'build-lib'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      # download benchmark results
      - uses: actions/download-artifact@v2
        with: { name: x86_64-unknown-linux-gnu.benchmark-out }

      - uses: actions/download-artifact@v2
        with: { name: x86_64-apple-darwin.benchmark-out }

      - uses: actions/download-artifact@v2
        with: { name: x86_64-pc-windows-msvc.benchmark-out }

      - name: build release notes
        run: |
          ls -l
          echo "### Results for x86_64-unknown-linux-gnu:" >> release_notes.md
          echo "" >> release_notes.md
          cat x86_64-unknown-linux-gnu.benchmark-out >> release_notes.md
          echo "" >> release_notes.md
          echo "### Results for x86_64-apple-darwin:" >> release_notes.md
          echo "" >> release_notes.md
          cat x86_64-apple-darwin.benchmark-out >> release_notes.md
          echo "" >> release_notes.md
          echo "### Results for x86_64-pc-windows-msvc:" >> release_notes.md
          echo "" >> release_notes.md
          cat x86_64-pc-windows-msvc.benchmark-out >> release_notes.md
          echo "" >> release_notes.md
          cat release_notes.md

      - name: upload release_notes.md
        uses: actions/upload-artifact@v2
        with:
          name: release_notes.md
          path: release_notes.md

  make-release:
    name: release
    needs:
      - 'build-lib'
      - 'build-header'
      - 'build-release-notes'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      # lib files
      - uses: actions/download-artifact@v2
        with: { name: libruby_parser_cpp-x86_64-unknown-linux-gnu.a }

      - uses: actions/download-artifact@v2
        with: { name: libruby_parser_cpp-x86_64-apple-darwin.a }

      - uses: actions/download-artifact@v2
        with: { name: libruby_parser_cpp-x86_64-pc-windows-msvc.lib }

      # header file
      - uses: actions/download-artifact@v2
        with: { name: lib-ruby-parser.hpp }

      # release notes
      - uses: actions/download-artifact@v2
        with: { name: release_notes.md }

      - name: show artifacts
        run: ls -l

      - name: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "libruby_parser_cpp-*,lib-ruby-parser.hpp"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
