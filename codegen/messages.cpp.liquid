// This file is autogenerated by {{ template }}

#include <cstring>
#include "messages.hpp"
#include "utils.hpp"

namespace lib_ruby_parser
{
    extern "C"
    {
        void LIB_RUBY_PARSER_drop_message(DiagnosticMessage *message);
    }

    DiagnosticMessage::Value::Value() {
        std::memset(this, 0, sizeof(Value));
    }
    DiagnosticMessage::Value::Value(DiagnosticMessage::Value &&other) {
        std::memcpy(this, &other, sizeof(Value));
        std::memset(&other, 0, sizeof(Value));
    };
    DiagnosticMessage::Value::~Value() {}

    DiagnosticMessage::Value &DiagnosticMessage::Value::operator=(DiagnosticMessage::Value &&other) {
        std::memcpy(this, &other, sizeof(Value));
        std::memset(&other, 0, sizeof(Value));
        return *this;
    }

    DiagnosticMessage::DiagnosticMessage(DiagnosticMessage &&other):
        tag(other.tag),
        as(std::move(other.as)) {}
    DiagnosticMessage::~DiagnosticMessage() {
        LIB_RUBY_PARSER_drop_message(this);
    }

    DiagnosticMessage &DiagnosticMessage::operator=(DiagnosticMessage &&other) {
        this->tag = other.tag;
        this->as = std::move(other.as);
        return *this;
    }

    LIST_IMPL(DiagnosticMessageList, DiagnosticMessage, LIB_RUBY_PARSER_drop_message_list);

    // Message variant constructors
    {%- for message in messages %}
    {{ message.camelcase_name }}::{{ message.camelcase_name }}(
    {%- for field in message.fields %}
    {%- case field.field_type -%}
    {%- when "Str" -%}
        {%- assign field_type = "String" -%}
    {%- when "Byte" -%}
        {%- assign field_type = "uint8_t" -%}
    {%- else -%}
        {%- assign field_type = "COMPILE ERROR" -%}
    {%- endcase -%}
        {{ field_type }} {{ field.snakecase_name | escape_cpp_keyword }}_{% unless forloop.last %}, {% endunless %}
    {%- endfor -%})
    {%- if message.fields.size > 0 -%}
        {{" : "}}
        {%- for field in message.fields -%}
            {{ field.snakecase_name | escape_cpp_keyword }}(std::move({{ field.snakecase_name | escape_cpp_keyword }}_))
            {%- unless forloop.last -%}, {% endunless -%}
        {%- endfor -%}
    {%- endif %} {}
{% endfor %}

    // Diagnostic constructors
{% for message in messages %}
    DiagnosticMessage::DiagnosticMessage({{ message.camelcase_name }} variant) : tag(DiagnosticMessage::Tag::{{ message.camelcase_name | camelcase_to_snakecase | upcase }}) {
        this->as.{{ message.camelcase_name | camelcase_to_snakecase }} = std::move(variant);
    }
{% endfor %}
} // namespace lib_ruby_parser
