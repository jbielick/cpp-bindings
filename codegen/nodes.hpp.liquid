#ifndef LIB_RUBY_PARSER_NODES_HPP
#define LIB_RUBY_PARSER_NODES_HPP

// This file is autogenerated by {{ template }}

#include <cstddef>
#include "string.hpp"
#include "loc.hpp"
#include "bytes.hpp"

namespace lib_ruby_parser
{
    class Node;
    class NodeList
    {
    public:
        Node *ptr;
        size_t capacity;
        size_t len;

        NodeList() = delete;
        NodeList(Node *ptr, size_t len, size_t capacity);
        ~NodeList();

        NodeList(const NodeList &) = delete;
        NodeList &operator=(NodeList const &) = delete;

        NodeList(NodeList &&);
        NodeList &operator=(NodeList &&);
    };

{% for node in nodes %}
    {{ node.comment | render_comment: "///", 4 }}
    class {{ node.camelcase_name }}
    {
    public:
        {%- for field in node.fields %}
        {%- case field.field_type -%}
        {%- when "Node" -%}
            {%- assign field_type = "Node *" -%}
        {%- when "Nodes" -%}
            {%- assign field_type = "NodeList " -%}
        {%- when "MaybeNode" or "RegexpOptions" -%}
            {%- assign field_type = "Node *" -%}
        {%- when "Loc" -%}
            {%- assign field_type = "Loc " -%}
        {%- when "MaybeLoc" -%}
            {%- assign field_type = "MaybeLoc " -%}
        {%- when "Str" or "RawStr" -%}
            {%- assign field_type = "String " -%}
        {%- when "MaybeStr" or "Chars" -%}
            {%- assign field_type = "MaybeString " -%}
        {%- when "StringValue" -%}
            {%- assign field_type = "Bytes " -%}
        {%- when "U8" -%}
            {%- assign field_type = "uint8_t " -%}
        {%- else -%}
            {%- assign field_type = "COMPILE ERROR " -%}
        {%- endcase %}
        {{ field.comment | render_comment: "///", 8 | replace: "~", "^" }}
        {{ field_type }}{{ field.snakecase_name | escape_cpp_keyword }};
{% endfor %}
    };
{% endfor %}

    class Node {
    public:
        enum class Tag {
            {%- for node in nodes %}
            {{ node.camelcase_name | camelcase_to_snakecase | upcase | escape_cpp_keyword }},
            {%- endfor %}
        };

        union Value {
            {%- for node in nodes %}
            {{ node.camelcase_name }} {{ node.camelcase_name | camelcase_to_snakecase | escape_cpp_keyword }};
            {%- endfor %}

            Value(Value &&);
            ~Value();

            Value &operator=(Value &&);
        };

        Tag tag;
        Value as;

        Node(Node &&);
        ~Node();

        Node &operator=(Node &&);
    };
} // namespace lib_ruby_parser

#endif // LIB_RUBY_PARSER_NODES_HPP
